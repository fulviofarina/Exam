//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3082
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace Sam {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("Labo_NAA")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class Labo_NAA : global::System.Data.DataSet {
        
        private DetectorsSelectDataTable tableDetectorsSelect;
        
        private DetectorsRequestsSelectDataTable tableDetectorsRequestsSelect;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public Labo_NAA() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected Labo_NAA(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["DetectorsSelect"] != null)) {
                    base.Tables.Add(new DetectorsSelectDataTable(ds.Tables["DetectorsSelect"]));
                }
                if ((ds.Tables["DetectorsRequestsSelect"] != null)) {
                    base.Tables.Add(new DetectorsRequestsSelectDataTable(ds.Tables["DetectorsRequestsSelect"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public DetectorsSelectDataTable DetectorsSelect {
            get {
                return this.tableDetectorsSelect;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public DetectorsRequestsSelectDataTable DetectorsRequestsSelect {
            get {
                return this.tableDetectorsRequestsSelect;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            Labo_NAA cln = ((Labo_NAA)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["DetectorsSelect"] != null)) {
                    base.Tables.Add(new DetectorsSelectDataTable(ds.Tables["DetectorsSelect"]));
                }
                if ((ds.Tables["DetectorsRequestsSelect"] != null)) {
                    base.Tables.Add(new DetectorsRequestsSelectDataTable(ds.Tables["DetectorsRequestsSelect"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableDetectorsSelect = ((DetectorsSelectDataTable)(base.Tables["DetectorsSelect"]));
            if ((initTable == true)) {
                if ((this.tableDetectorsSelect != null)) {
                    this.tableDetectorsSelect.InitVars();
                }
            }
            this.tableDetectorsRequestsSelect = ((DetectorsRequestsSelectDataTable)(base.Tables["DetectorsRequestsSelect"]));
            if ((initTable == true)) {
                if ((this.tableDetectorsRequestsSelect != null)) {
                    this.tableDetectorsRequestsSelect.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "Labo_NAA";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/Labo_NAA.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableDetectorsSelect = new DetectorsSelectDataTable();
            base.Tables.Add(this.tableDetectorsSelect);
            this.tableDetectorsRequestsSelect = new DetectorsRequestsSelectDataTable();
            base.Tables.Add(this.tableDetectorsRequestsSelect);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeDetectorsSelect() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeDetectorsRequestsSelect() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            Labo_NAA ds = new Labo_NAA();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void DetectorsSelectRowChangeEventHandler(object sender, DetectorsSelectRowChangeEvent e);
        
        public delegate void DetectorsRequestsSelectRowChangeEventHandler(object sender, DetectorsRequestsSelectRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class DetectorsSelectDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnDetectorName;
            
            private global::System.Data.DataColumn columnIsAvailable;
            
            private global::System.Data.DataColumn columnIsLocked;
            
            private global::System.Data.DataColumn columnPresetRealTime;
            
            private global::System.Data.DataColumn columnPresetLiveTime;
            
            private global::System.Data.DataColumn columnElapsedRealTime;
            
            private global::System.Data.DataColumn columnElapsedLiveTime;
            
            private global::System.Data.DataColumn columnEneCalOffset;
            
            private global::System.Data.DataColumn columnEneCalSlope;
            
            private global::System.Data.DataColumn columnSpectrum;
            
            private global::System.Data.DataColumn columnDeadTimePercent;
            
            private global::System.Data.DataColumn columnPosition;
            
            private global::System.Data.DataColumn columnDetectorStatus;
            
            private global::System.Data.DataColumn columnMCAStatus;
            
            private global::System.Data.DataColumn columnMCAStatusDescription;
            
            private global::System.Data.DataColumn columnSampleID;
            
            private global::System.Data.DataColumn columnSampleName;
            
            private global::System.Data.DataColumn columnAcquisitionPath;
            
            private global::System.Data.DataColumn columnAcquisitionFileName;
            
            private global::System.Data.DataColumn columnAcquisitionPathBackup;
            
            private global::System.Data.DataColumn columnAcquisitionFileNameBackup;
            
            private global::System.Data.DataColumn columnAcquisitionStartTime;
            
            private global::System.Data.DataColumn columnAcquisitionStartTimePC;
            
            private global::System.Data.DataColumn columnComments;
            
            private global::System.Data.DataColumn columnIrradiationCode;
            
            private global::System.Data.DataColumn columnNumberOfAcq;
            
            private global::System.Data.DataColumn columnAcquisitionsIDReference;
            
            private global::System.Data.DataColumn columnIsSaved;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DetectorsSelectDataTable() {
                this.TableName = "DetectorsSelect";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal DetectorsSelectDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected DetectorsSelectDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DetectorNameColumn {
                get {
                    return this.columnDetectorName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsAvailableColumn {
                get {
                    return this.columnIsAvailable;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsLockedColumn {
                get {
                    return this.columnIsLocked;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PresetRealTimeColumn {
                get {
                    return this.columnPresetRealTime;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PresetLiveTimeColumn {
                get {
                    return this.columnPresetLiveTime;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ElapsedRealTimeColumn {
                get {
                    return this.columnElapsedRealTime;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ElapsedLiveTimeColumn {
                get {
                    return this.columnElapsedLiveTime;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EneCalOffsetColumn {
                get {
                    return this.columnEneCalOffset;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EneCalSlopeColumn {
                get {
                    return this.columnEneCalSlope;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SpectrumColumn {
                get {
                    return this.columnSpectrum;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DeadTimePercentColumn {
                get {
                    return this.columnDeadTimePercent;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PositionColumn {
                get {
                    return this.columnPosition;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DetectorStatusColumn {
                get {
                    return this.columnDetectorStatus;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MCAStatusColumn {
                get {
                    return this.columnMCAStatus;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MCAStatusDescriptionColumn {
                get {
                    return this.columnMCAStatusDescription;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SampleIDColumn {
                get {
                    return this.columnSampleID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SampleNameColumn {
                get {
                    return this.columnSampleName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AcquisitionPathColumn {
                get {
                    return this.columnAcquisitionPath;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AcquisitionFileNameColumn {
                get {
                    return this.columnAcquisitionFileName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AcquisitionPathBackupColumn {
                get {
                    return this.columnAcquisitionPathBackup;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AcquisitionFileNameBackupColumn {
                get {
                    return this.columnAcquisitionFileNameBackup;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AcquisitionStartTimeColumn {
                get {
                    return this.columnAcquisitionStartTime;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AcquisitionStartTimePCColumn {
                get {
                    return this.columnAcquisitionStartTimePC;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CommentsColumn {
                get {
                    return this.columnComments;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IrradiationCodeColumn {
                get {
                    return this.columnIrradiationCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NumberOfAcqColumn {
                get {
                    return this.columnNumberOfAcq;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AcquisitionsIDReferenceColumn {
                get {
                    return this.columnAcquisitionsIDReference;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsSavedColumn {
                get {
                    return this.columnIsSaved;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DetectorsSelectRow this[int index] {
                get {
                    return ((DetectorsSelectRow)(this.Rows[index]));
                }
            }
            
            public event DetectorsSelectRowChangeEventHandler DetectorsSelectRowChanging;
            
            public event DetectorsSelectRowChangeEventHandler DetectorsSelectRowChanged;
            
            public event DetectorsSelectRowChangeEventHandler DetectorsSelectRowDeleting;
            
            public event DetectorsSelectRowChangeEventHandler DetectorsSelectRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddDetectorsSelectRow(DetectorsSelectRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DetectorsSelectRow AddDetectorsSelectRow(
                        string DetectorName, 
                        bool IsAvailable, 
                        bool IsLocked, 
                        float PresetRealTime, 
                        float PresetLiveTime, 
                        float ElapsedRealTime, 
                        float ElapsedLiveTime, 
                        float EneCalOffset, 
                        float EneCalSlope, 
                        byte[] Spectrum, 
                        float DeadTimePercent, 
                        int Position, 
                        string DetectorStatus, 
                        int MCAStatus, 
                        string MCAStatusDescription, 
                        int SampleID, 
                        string SampleName, 
                        string AcquisitionPath, 
                        string AcquisitionFileName, 
                        string AcquisitionPathBackup, 
                        string AcquisitionFileNameBackup, 
                        System.DateTime AcquisitionStartTime, 
                        System.DateTime AcquisitionStartTimePC, 
                        string Comments, 
                        string IrradiationCode, 
                        int NumberOfAcq, 
                        int AcquisitionsIDReference, 
                        bool IsSaved) {
                DetectorsSelectRow rowDetectorsSelectRow = ((DetectorsSelectRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        DetectorName,
                        IsAvailable,
                        IsLocked,
                        PresetRealTime,
                        PresetLiveTime,
                        ElapsedRealTime,
                        ElapsedLiveTime,
                        EneCalOffset,
                        EneCalSlope,
                        Spectrum,
                        DeadTimePercent,
                        Position,
                        DetectorStatus,
                        MCAStatus,
                        MCAStatusDescription,
                        SampleID,
                        SampleName,
                        AcquisitionPath,
                        AcquisitionFileName,
                        AcquisitionPathBackup,
                        AcquisitionFileNameBackup,
                        AcquisitionStartTime,
                        AcquisitionStartTimePC,
                        Comments,
                        IrradiationCode,
                        NumberOfAcq,
                        AcquisitionsIDReference,
                        IsSaved};
                rowDetectorsSelectRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowDetectorsSelectRow);
                return rowDetectorsSelectRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                DetectorsSelectDataTable cln = ((DetectorsSelectDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new DetectorsSelectDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnDetectorName = base.Columns["DetectorName"];
                this.columnIsAvailable = base.Columns["IsAvailable"];
                this.columnIsLocked = base.Columns["IsLocked"];
                this.columnPresetRealTime = base.Columns["PresetRealTime"];
                this.columnPresetLiveTime = base.Columns["PresetLiveTime"];
                this.columnElapsedRealTime = base.Columns["ElapsedRealTime"];
                this.columnElapsedLiveTime = base.Columns["ElapsedLiveTime"];
                this.columnEneCalOffset = base.Columns["EneCalOffset"];
                this.columnEneCalSlope = base.Columns["EneCalSlope"];
                this.columnSpectrum = base.Columns["Spectrum"];
                this.columnDeadTimePercent = base.Columns["DeadTimePercent"];
                this.columnPosition = base.Columns["Position"];
                this.columnDetectorStatus = base.Columns["DetectorStatus"];
                this.columnMCAStatus = base.Columns["MCAStatus"];
                this.columnMCAStatusDescription = base.Columns["MCAStatusDescription"];
                this.columnSampleID = base.Columns["SampleID"];
                this.columnSampleName = base.Columns["SampleName"];
                this.columnAcquisitionPath = base.Columns["AcquisitionPath"];
                this.columnAcquisitionFileName = base.Columns["AcquisitionFileName"];
                this.columnAcquisitionPathBackup = base.Columns["AcquisitionPathBackup"];
                this.columnAcquisitionFileNameBackup = base.Columns["AcquisitionFileNameBackup"];
                this.columnAcquisitionStartTime = base.Columns["AcquisitionStartTime"];
                this.columnAcquisitionStartTimePC = base.Columns["AcquisitionStartTimePC"];
                this.columnComments = base.Columns["Comments"];
                this.columnIrradiationCode = base.Columns["IrradiationCode"];
                this.columnNumberOfAcq = base.Columns["NumberOfAcq"];
                this.columnAcquisitionsIDReference = base.Columns["AcquisitionsIDReference"];
                this.columnIsSaved = base.Columns["IsSaved"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnDetectorName = new global::System.Data.DataColumn("DetectorName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDetectorName);
                this.columnIsAvailable = new global::System.Data.DataColumn("IsAvailable", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsAvailable);
                this.columnIsLocked = new global::System.Data.DataColumn("IsLocked", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsLocked);
                this.columnPresetRealTime = new global::System.Data.DataColumn("PresetRealTime", typeof(float), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPresetRealTime);
                this.columnPresetLiveTime = new global::System.Data.DataColumn("PresetLiveTime", typeof(float), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPresetLiveTime);
                this.columnElapsedRealTime = new global::System.Data.DataColumn("ElapsedRealTime", typeof(float), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnElapsedRealTime);
                this.columnElapsedLiveTime = new global::System.Data.DataColumn("ElapsedLiveTime", typeof(float), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnElapsedLiveTime);
                this.columnEneCalOffset = new global::System.Data.DataColumn("EneCalOffset", typeof(float), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEneCalOffset);
                this.columnEneCalSlope = new global::System.Data.DataColumn("EneCalSlope", typeof(float), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEneCalSlope);
                this.columnSpectrum = new global::System.Data.DataColumn("Spectrum", typeof(byte[]), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSpectrum);
                this.columnDeadTimePercent = new global::System.Data.DataColumn("DeadTimePercent", typeof(float), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDeadTimePercent);
                this.columnPosition = new global::System.Data.DataColumn("Position", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPosition);
                this.columnDetectorStatus = new global::System.Data.DataColumn("DetectorStatus", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDetectorStatus);
                this.columnMCAStatus = new global::System.Data.DataColumn("MCAStatus", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMCAStatus);
                this.columnMCAStatusDescription = new global::System.Data.DataColumn("MCAStatusDescription", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMCAStatusDescription);
                this.columnSampleID = new global::System.Data.DataColumn("SampleID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSampleID);
                this.columnSampleName = new global::System.Data.DataColumn("SampleName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSampleName);
                this.columnAcquisitionPath = new global::System.Data.DataColumn("AcquisitionPath", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAcquisitionPath);
                this.columnAcquisitionFileName = new global::System.Data.DataColumn("AcquisitionFileName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAcquisitionFileName);
                this.columnAcquisitionPathBackup = new global::System.Data.DataColumn("AcquisitionPathBackup", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAcquisitionPathBackup);
                this.columnAcquisitionFileNameBackup = new global::System.Data.DataColumn("AcquisitionFileNameBackup", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAcquisitionFileNameBackup);
                this.columnAcquisitionStartTime = new global::System.Data.DataColumn("AcquisitionStartTime", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAcquisitionStartTime);
                this.columnAcquisitionStartTimePC = new global::System.Data.DataColumn("AcquisitionStartTimePC", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAcquisitionStartTimePC);
                this.columnComments = new global::System.Data.DataColumn("Comments", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnComments);
                this.columnIrradiationCode = new global::System.Data.DataColumn("IrradiationCode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIrradiationCode);
                this.columnNumberOfAcq = new global::System.Data.DataColumn("NumberOfAcq", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNumberOfAcq);
                this.columnAcquisitionsIDReference = new global::System.Data.DataColumn("AcquisitionsIDReference", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAcquisitionsIDReference);
                this.columnIsSaved = new global::System.Data.DataColumn("IsSaved", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsSaved);
                this.columnDetectorName.MaxLength = 50;
                this.columnDetectorStatus.MaxLength = 50;
                this.columnMCAStatusDescription.MaxLength = 50;
                this.columnSampleName.MaxLength = 50;
                this.columnAcquisitionPath.MaxLength = 255;
                this.columnAcquisitionFileName.MaxLength = 50;
                this.columnAcquisitionPathBackup.MaxLength = 255;
                this.columnAcquisitionFileNameBackup.MaxLength = 50;
                this.columnComments.MaxLength = 255;
                this.columnIrradiationCode.MaxLength = 50;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DetectorsSelectRow NewDetectorsSelectRow() {
                return ((DetectorsSelectRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new DetectorsSelectRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(DetectorsSelectRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.DetectorsSelectRowChanged != null)) {
                    this.DetectorsSelectRowChanged(this, new DetectorsSelectRowChangeEvent(((DetectorsSelectRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.DetectorsSelectRowChanging != null)) {
                    this.DetectorsSelectRowChanging(this, new DetectorsSelectRowChangeEvent(((DetectorsSelectRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.DetectorsSelectRowDeleted != null)) {
                    this.DetectorsSelectRowDeleted(this, new DetectorsSelectRowChangeEvent(((DetectorsSelectRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.DetectorsSelectRowDeleting != null)) {
                    this.DetectorsSelectRowDeleting(this, new DetectorsSelectRowChangeEvent(((DetectorsSelectRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveDetectorsSelectRow(DetectorsSelectRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                Labo_NAA ds = new Labo_NAA();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "DetectorsSelectDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class DetectorsRequestsSelectDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnDetectorsRequestID;
            
            private global::System.Data.DataColumn columnDetectorName;
            
            private global::System.Data.DataColumn columnPresetRealTime;
            
            private global::System.Data.DataColumn columnPresetLiveTime;
            
            private global::System.Data.DataColumn columnRequestCode;
            
            private global::System.Data.DataColumn columnAcquisitionPath;
            
            private global::System.Data.DataColumn columnAcquisitionFileName;
            
            private global::System.Data.DataColumn columnAcquisitionPathBackup;
            
            private global::System.Data.DataColumn columnAcquisitionFileNameBackup;
            
            private global::System.Data.DataColumn columnSampleID;
            
            private global::System.Data.DataColumn columnSampleName;
            
            private global::System.Data.DataColumn columnComments;
            
            private global::System.Data.DataColumn columnPosition;
            
            private global::System.Data.DataColumn columnIrradiationCode;
            
            private global::System.Data.DataColumn columnNumberOfAcq;
            
            private global::System.Data.DataColumn columnRequestDateTime;
            
            private global::System.Data.DataColumn columnIsDone;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DetectorsRequestsSelectDataTable() {
                this.TableName = "DetectorsRequestsSelect";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal DetectorsRequestsSelectDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected DetectorsRequestsSelectDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DetectorsRequestIDColumn {
                get {
                    return this.columnDetectorsRequestID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DetectorNameColumn {
                get {
                    return this.columnDetectorName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PresetRealTimeColumn {
                get {
                    return this.columnPresetRealTime;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PresetLiveTimeColumn {
                get {
                    return this.columnPresetLiveTime;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RequestCodeColumn {
                get {
                    return this.columnRequestCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AcquisitionPathColumn {
                get {
                    return this.columnAcquisitionPath;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AcquisitionFileNameColumn {
                get {
                    return this.columnAcquisitionFileName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AcquisitionPathBackupColumn {
                get {
                    return this.columnAcquisitionPathBackup;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AcquisitionFileNameBackupColumn {
                get {
                    return this.columnAcquisitionFileNameBackup;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SampleIDColumn {
                get {
                    return this.columnSampleID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SampleNameColumn {
                get {
                    return this.columnSampleName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CommentsColumn {
                get {
                    return this.columnComments;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PositionColumn {
                get {
                    return this.columnPosition;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IrradiationCodeColumn {
                get {
                    return this.columnIrradiationCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NumberOfAcqColumn {
                get {
                    return this.columnNumberOfAcq;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RequestDateTimeColumn {
                get {
                    return this.columnRequestDateTime;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsDoneColumn {
                get {
                    return this.columnIsDone;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DetectorsRequestsSelectRow this[int index] {
                get {
                    return ((DetectorsRequestsSelectRow)(this.Rows[index]));
                }
            }
            
            public event DetectorsRequestsSelectRowChangeEventHandler DetectorsRequestsSelectRowChanging;
            
            public event DetectorsRequestsSelectRowChangeEventHandler DetectorsRequestsSelectRowChanged;
            
            public event DetectorsRequestsSelectRowChangeEventHandler DetectorsRequestsSelectRowDeleting;
            
            public event DetectorsRequestsSelectRowChangeEventHandler DetectorsRequestsSelectRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddDetectorsRequestsSelectRow(DetectorsRequestsSelectRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DetectorsRequestsSelectRow AddDetectorsRequestsSelectRow(
                        string DetectorName, 
                        float PresetRealTime, 
                        float PresetLiveTime, 
                        string RequestCode, 
                        string AcquisitionPath, 
                        string AcquisitionFileName, 
                        string AcquisitionPathBackup, 
                        string AcquisitionFileNameBackup, 
                        int SampleID, 
                        string SampleName, 
                        string Comments, 
                        int Position, 
                        string IrradiationCode, 
                        int NumberOfAcq, 
                        System.DateTime RequestDateTime, 
                        bool IsDone) {
                DetectorsRequestsSelectRow rowDetectorsRequestsSelectRow = ((DetectorsRequestsSelectRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        DetectorName,
                        PresetRealTime,
                        PresetLiveTime,
                        RequestCode,
                        AcquisitionPath,
                        AcquisitionFileName,
                        AcquisitionPathBackup,
                        AcquisitionFileNameBackup,
                        SampleID,
                        SampleName,
                        Comments,
                        Position,
                        IrradiationCode,
                        NumberOfAcq,
                        RequestDateTime,
                        IsDone};
                rowDetectorsRequestsSelectRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowDetectorsRequestsSelectRow);
                return rowDetectorsRequestsSelectRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                DetectorsRequestsSelectDataTable cln = ((DetectorsRequestsSelectDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new DetectorsRequestsSelectDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnDetectorsRequestID = base.Columns["DetectorsRequestID"];
                this.columnDetectorName = base.Columns["DetectorName"];
                this.columnPresetRealTime = base.Columns["PresetRealTime"];
                this.columnPresetLiveTime = base.Columns["PresetLiveTime"];
                this.columnRequestCode = base.Columns["RequestCode"];
                this.columnAcquisitionPath = base.Columns["AcquisitionPath"];
                this.columnAcquisitionFileName = base.Columns["AcquisitionFileName"];
                this.columnAcquisitionPathBackup = base.Columns["AcquisitionPathBackup"];
                this.columnAcquisitionFileNameBackup = base.Columns["AcquisitionFileNameBackup"];
                this.columnSampleID = base.Columns["SampleID"];
                this.columnSampleName = base.Columns["SampleName"];
                this.columnComments = base.Columns["Comments"];
                this.columnPosition = base.Columns["Position"];
                this.columnIrradiationCode = base.Columns["IrradiationCode"];
                this.columnNumberOfAcq = base.Columns["NumberOfAcq"];
                this.columnRequestDateTime = base.Columns["RequestDateTime"];
                this.columnIsDone = base.Columns["IsDone"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnDetectorsRequestID = new global::System.Data.DataColumn("DetectorsRequestID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDetectorsRequestID);
                this.columnDetectorName = new global::System.Data.DataColumn("DetectorName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDetectorName);
                this.columnPresetRealTime = new global::System.Data.DataColumn("PresetRealTime", typeof(float), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPresetRealTime);
                this.columnPresetLiveTime = new global::System.Data.DataColumn("PresetLiveTime", typeof(float), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPresetLiveTime);
                this.columnRequestCode = new global::System.Data.DataColumn("RequestCode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRequestCode);
                this.columnAcquisitionPath = new global::System.Data.DataColumn("AcquisitionPath", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAcquisitionPath);
                this.columnAcquisitionFileName = new global::System.Data.DataColumn("AcquisitionFileName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAcquisitionFileName);
                this.columnAcquisitionPathBackup = new global::System.Data.DataColumn("AcquisitionPathBackup", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAcquisitionPathBackup);
                this.columnAcquisitionFileNameBackup = new global::System.Data.DataColumn("AcquisitionFileNameBackup", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAcquisitionFileNameBackup);
                this.columnSampleID = new global::System.Data.DataColumn("SampleID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSampleID);
                this.columnSampleName = new global::System.Data.DataColumn("SampleName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSampleName);
                this.columnComments = new global::System.Data.DataColumn("Comments", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnComments);
                this.columnPosition = new global::System.Data.DataColumn("Position", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPosition);
                this.columnIrradiationCode = new global::System.Data.DataColumn("IrradiationCode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIrradiationCode);
                this.columnNumberOfAcq = new global::System.Data.DataColumn("NumberOfAcq", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNumberOfAcq);
                this.columnRequestDateTime = new global::System.Data.DataColumn("RequestDateTime", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRequestDateTime);
                this.columnIsDone = new global::System.Data.DataColumn("IsDone", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsDone);
                this.columnDetectorsRequestID.AutoIncrement = true;
                this.columnDetectorsRequestID.AllowDBNull = false;
                this.columnDetectorsRequestID.ReadOnly = true;
                this.columnDetectorName.MaxLength = 50;
                this.columnRequestCode.MaxLength = 50;
                this.columnAcquisitionPath.MaxLength = 255;
                this.columnAcquisitionFileName.MaxLength = 50;
                this.columnAcquisitionPathBackup.MaxLength = 255;
                this.columnAcquisitionFileNameBackup.MaxLength = 50;
                this.columnSampleName.MaxLength = 50;
                this.columnComments.MaxLength = 255;
                this.columnIrradiationCode.MaxLength = 50;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DetectorsRequestsSelectRow NewDetectorsRequestsSelectRow() {
                return ((DetectorsRequestsSelectRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new DetectorsRequestsSelectRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(DetectorsRequestsSelectRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.DetectorsRequestsSelectRowChanged != null)) {
                    this.DetectorsRequestsSelectRowChanged(this, new DetectorsRequestsSelectRowChangeEvent(((DetectorsRequestsSelectRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.DetectorsRequestsSelectRowChanging != null)) {
                    this.DetectorsRequestsSelectRowChanging(this, new DetectorsRequestsSelectRowChangeEvent(((DetectorsRequestsSelectRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.DetectorsRequestsSelectRowDeleted != null)) {
                    this.DetectorsRequestsSelectRowDeleted(this, new DetectorsRequestsSelectRowChangeEvent(((DetectorsRequestsSelectRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.DetectorsRequestsSelectRowDeleting != null)) {
                    this.DetectorsRequestsSelectRowDeleting(this, new DetectorsRequestsSelectRowChangeEvent(((DetectorsRequestsSelectRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveDetectorsRequestsSelectRow(DetectorsRequestsSelectRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                Labo_NAA ds = new Labo_NAA();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "DetectorsRequestsSelectDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class DetectorsSelectRow : global::System.Data.DataRow {
            
            private DetectorsSelectDataTable tableDetectorsSelect;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal DetectorsSelectRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableDetectorsSelect = ((DetectorsSelectDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DetectorName {
                get {
                    try {
                        return ((string)(this[this.tableDetectorsSelect.DetectorNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DetectorName\' in table \'DetectorsSelect\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDetectorsSelect.DetectorNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAvailable {
                get {
                    try {
                        return ((bool)(this[this.tableDetectorsSelect.IsAvailableColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsAvailable\' in table \'DetectorsSelect\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDetectorsSelect.IsAvailableColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLocked {
                get {
                    try {
                        return ((bool)(this[this.tableDetectorsSelect.IsLockedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsLocked\' in table \'DetectorsSelect\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDetectorsSelect.IsLockedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public float PresetRealTime {
                get {
                    try {
                        return ((float)(this[this.tableDetectorsSelect.PresetRealTimeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PresetRealTime\' in table \'DetectorsSelect\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDetectorsSelect.PresetRealTimeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public float PresetLiveTime {
                get {
                    try {
                        return ((float)(this[this.tableDetectorsSelect.PresetLiveTimeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PresetLiveTime\' in table \'DetectorsSelect\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDetectorsSelect.PresetLiveTimeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public float ElapsedRealTime {
                get {
                    try {
                        return ((float)(this[this.tableDetectorsSelect.ElapsedRealTimeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ElapsedRealTime\' in table \'DetectorsSelect\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDetectorsSelect.ElapsedRealTimeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public float ElapsedLiveTime {
                get {
                    try {
                        return ((float)(this[this.tableDetectorsSelect.ElapsedLiveTimeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ElapsedLiveTime\' in table \'DetectorsSelect\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDetectorsSelect.ElapsedLiveTimeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public float EneCalOffset {
                get {
                    try {
                        return ((float)(this[this.tableDetectorsSelect.EneCalOffsetColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EneCalOffset\' in table \'DetectorsSelect\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDetectorsSelect.EneCalOffsetColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public float EneCalSlope {
                get {
                    try {
                        return ((float)(this[this.tableDetectorsSelect.EneCalSlopeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EneCalSlope\' in table \'DetectorsSelect\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDetectorsSelect.EneCalSlopeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte[] Spectrum {
                get {
                    try {
                        return ((byte[])(this[this.tableDetectorsSelect.SpectrumColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Spectrum\' in table \'DetectorsSelect\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDetectorsSelect.SpectrumColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public float DeadTimePercent {
                get {
                    try {
                        return ((float)(this[this.tableDetectorsSelect.DeadTimePercentColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DeadTimePercent\' in table \'DetectorsSelect\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDetectorsSelect.DeadTimePercentColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Position {
                get {
                    try {
                        return ((int)(this[this.tableDetectorsSelect.PositionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Position\' in table \'DetectorsSelect\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDetectorsSelect.PositionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DetectorStatus {
                get {
                    try {
                        return ((string)(this[this.tableDetectorsSelect.DetectorStatusColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DetectorStatus\' in table \'DetectorsSelect\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDetectorsSelect.DetectorStatusColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int MCAStatus {
                get {
                    try {
                        return ((int)(this[this.tableDetectorsSelect.MCAStatusColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MCAStatus\' in table \'DetectorsSelect\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDetectorsSelect.MCAStatusColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MCAStatusDescription {
                get {
                    try {
                        return ((string)(this[this.tableDetectorsSelect.MCAStatusDescriptionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MCAStatusDescription\' in table \'DetectorsSelect\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tableDetectorsSelect.MCAStatusDescriptionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int SampleID {
                get {
                    try {
                        return ((int)(this[this.tableDetectorsSelect.SampleIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SampleID\' in table \'DetectorsSelect\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDetectorsSelect.SampleIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SampleName {
                get {
                    try {
                        return ((string)(this[this.tableDetectorsSelect.SampleNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SampleName\' in table \'DetectorsSelect\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDetectorsSelect.SampleNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AcquisitionPath {
                get {
                    try {
                        return ((string)(this[this.tableDetectorsSelect.AcquisitionPathColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AcquisitionPath\' in table \'DetectorsSelect\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDetectorsSelect.AcquisitionPathColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AcquisitionFileName {
                get {
                    try {
                        return ((string)(this[this.tableDetectorsSelect.AcquisitionFileNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AcquisitionFileName\' in table \'DetectorsSelect\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDetectorsSelect.AcquisitionFileNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AcquisitionPathBackup {
                get {
                    try {
                        return ((string)(this[this.tableDetectorsSelect.AcquisitionPathBackupColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AcquisitionPathBackup\' in table \'DetectorsSelect\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tableDetectorsSelect.AcquisitionPathBackupColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AcquisitionFileNameBackup {
                get {
                    try {
                        return ((string)(this[this.tableDetectorsSelect.AcquisitionFileNameBackupColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AcquisitionFileNameBackup\' in table \'DetectorsSelect\' is DB" +
                                "Null.", e);
                    }
                }
                set {
                    this[this.tableDetectorsSelect.AcquisitionFileNameBackupColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime AcquisitionStartTime {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableDetectorsSelect.AcquisitionStartTimeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AcquisitionStartTime\' in table \'DetectorsSelect\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tableDetectorsSelect.AcquisitionStartTimeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime AcquisitionStartTimePC {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableDetectorsSelect.AcquisitionStartTimePCColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AcquisitionStartTimePC\' in table \'DetectorsSelect\' is DBNul" +
                                "l.", e);
                    }
                }
                set {
                    this[this.tableDetectorsSelect.AcquisitionStartTimePCColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Comments {
                get {
                    try {
                        return ((string)(this[this.tableDetectorsSelect.CommentsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Comments\' in table \'DetectorsSelect\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDetectorsSelect.CommentsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string IrradiationCode {
                get {
                    try {
                        return ((string)(this[this.tableDetectorsSelect.IrradiationCodeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IrradiationCode\' in table \'DetectorsSelect\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDetectorsSelect.IrradiationCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int NumberOfAcq {
                get {
                    try {
                        return ((int)(this[this.tableDetectorsSelect.NumberOfAcqColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'NumberOfAcq\' in table \'DetectorsSelect\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDetectorsSelect.NumberOfAcqColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int AcquisitionsIDReference {
                get {
                    try {
                        return ((int)(this[this.tableDetectorsSelect.AcquisitionsIDReferenceColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AcquisitionsIDReference\' in table \'DetectorsSelect\' is DBNu" +
                                "ll.", e);
                    }
                }
                set {
                    this[this.tableDetectorsSelect.AcquisitionsIDReferenceColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSaved {
                get {
                    try {
                        return ((bool)(this[this.tableDetectorsSelect.IsSavedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsSaved\' in table \'DetectorsSelect\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDetectorsSelect.IsSavedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDetectorNameNull() {
                return this.IsNull(this.tableDetectorsSelect.DetectorNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDetectorNameNull() {
                this[this.tableDetectorsSelect.DetectorNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsAvailableNull() {
                return this.IsNull(this.tableDetectorsSelect.IsAvailableColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsAvailableNull() {
                this[this.tableDetectorsSelect.IsAvailableColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsLockedNull() {
                return this.IsNull(this.tableDetectorsSelect.IsLockedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsLockedNull() {
                this[this.tableDetectorsSelect.IsLockedColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPresetRealTimeNull() {
                return this.IsNull(this.tableDetectorsSelect.PresetRealTimeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPresetRealTimeNull() {
                this[this.tableDetectorsSelect.PresetRealTimeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPresetLiveTimeNull() {
                return this.IsNull(this.tableDetectorsSelect.PresetLiveTimeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPresetLiveTimeNull() {
                this[this.tableDetectorsSelect.PresetLiveTimeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsElapsedRealTimeNull() {
                return this.IsNull(this.tableDetectorsSelect.ElapsedRealTimeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetElapsedRealTimeNull() {
                this[this.tableDetectorsSelect.ElapsedRealTimeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsElapsedLiveTimeNull() {
                return this.IsNull(this.tableDetectorsSelect.ElapsedLiveTimeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetElapsedLiveTimeNull() {
                this[this.tableDetectorsSelect.ElapsedLiveTimeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEneCalOffsetNull() {
                return this.IsNull(this.tableDetectorsSelect.EneCalOffsetColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEneCalOffsetNull() {
                this[this.tableDetectorsSelect.EneCalOffsetColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEneCalSlopeNull() {
                return this.IsNull(this.tableDetectorsSelect.EneCalSlopeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEneCalSlopeNull() {
                this[this.tableDetectorsSelect.EneCalSlopeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSpectrumNull() {
                return this.IsNull(this.tableDetectorsSelect.SpectrumColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSpectrumNull() {
                this[this.tableDetectorsSelect.SpectrumColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDeadTimePercentNull() {
                return this.IsNull(this.tableDetectorsSelect.DeadTimePercentColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDeadTimePercentNull() {
                this[this.tableDetectorsSelect.DeadTimePercentColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPositionNull() {
                return this.IsNull(this.tableDetectorsSelect.PositionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPositionNull() {
                this[this.tableDetectorsSelect.PositionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDetectorStatusNull() {
                return this.IsNull(this.tableDetectorsSelect.DetectorStatusColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDetectorStatusNull() {
                this[this.tableDetectorsSelect.DetectorStatusColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMCAStatusNull() {
                return this.IsNull(this.tableDetectorsSelect.MCAStatusColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMCAStatusNull() {
                this[this.tableDetectorsSelect.MCAStatusColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMCAStatusDescriptionNull() {
                return this.IsNull(this.tableDetectorsSelect.MCAStatusDescriptionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMCAStatusDescriptionNull() {
                this[this.tableDetectorsSelect.MCAStatusDescriptionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSampleIDNull() {
                return this.IsNull(this.tableDetectorsSelect.SampleIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSampleIDNull() {
                this[this.tableDetectorsSelect.SampleIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSampleNameNull() {
                return this.IsNull(this.tableDetectorsSelect.SampleNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSampleNameNull() {
                this[this.tableDetectorsSelect.SampleNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAcquisitionPathNull() {
                return this.IsNull(this.tableDetectorsSelect.AcquisitionPathColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAcquisitionPathNull() {
                this[this.tableDetectorsSelect.AcquisitionPathColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAcquisitionFileNameNull() {
                return this.IsNull(this.tableDetectorsSelect.AcquisitionFileNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAcquisitionFileNameNull() {
                this[this.tableDetectorsSelect.AcquisitionFileNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAcquisitionPathBackupNull() {
                return this.IsNull(this.tableDetectorsSelect.AcquisitionPathBackupColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAcquisitionPathBackupNull() {
                this[this.tableDetectorsSelect.AcquisitionPathBackupColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAcquisitionFileNameBackupNull() {
                return this.IsNull(this.tableDetectorsSelect.AcquisitionFileNameBackupColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAcquisitionFileNameBackupNull() {
                this[this.tableDetectorsSelect.AcquisitionFileNameBackupColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAcquisitionStartTimeNull() {
                return this.IsNull(this.tableDetectorsSelect.AcquisitionStartTimeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAcquisitionStartTimeNull() {
                this[this.tableDetectorsSelect.AcquisitionStartTimeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAcquisitionStartTimePCNull() {
                return this.IsNull(this.tableDetectorsSelect.AcquisitionStartTimePCColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAcquisitionStartTimePCNull() {
                this[this.tableDetectorsSelect.AcquisitionStartTimePCColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCommentsNull() {
                return this.IsNull(this.tableDetectorsSelect.CommentsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCommentsNull() {
                this[this.tableDetectorsSelect.CommentsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIrradiationCodeNull() {
                return this.IsNull(this.tableDetectorsSelect.IrradiationCodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIrradiationCodeNull() {
                this[this.tableDetectorsSelect.IrradiationCodeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNumberOfAcqNull() {
                return this.IsNull(this.tableDetectorsSelect.NumberOfAcqColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNumberOfAcqNull() {
                this[this.tableDetectorsSelect.NumberOfAcqColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAcquisitionsIDReferenceNull() {
                return this.IsNull(this.tableDetectorsSelect.AcquisitionsIDReferenceColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAcquisitionsIDReferenceNull() {
                this[this.tableDetectorsSelect.AcquisitionsIDReferenceColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsSavedNull() {
                return this.IsNull(this.tableDetectorsSelect.IsSavedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsSavedNull() {
                this[this.tableDetectorsSelect.IsSavedColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class DetectorsRequestsSelectRow : global::System.Data.DataRow {
            
            private DetectorsRequestsSelectDataTable tableDetectorsRequestsSelect;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal DetectorsRequestsSelectRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableDetectorsRequestsSelect = ((DetectorsRequestsSelectDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int DetectorsRequestID {
                get {
                    return ((int)(this[this.tableDetectorsRequestsSelect.DetectorsRequestIDColumn]));
                }
                set {
                    this[this.tableDetectorsRequestsSelect.DetectorsRequestIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DetectorName {
                get {
                    try {
                        return ((string)(this[this.tableDetectorsRequestsSelect.DetectorNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DetectorName\' in table \'DetectorsRequestsSelect\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tableDetectorsRequestsSelect.DetectorNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public float PresetRealTime {
                get {
                    try {
                        return ((float)(this[this.tableDetectorsRequestsSelect.PresetRealTimeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PresetRealTime\' in table \'DetectorsRequestsSelect\' is DBNul" +
                                "l.", e);
                    }
                }
                set {
                    this[this.tableDetectorsRequestsSelect.PresetRealTimeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public float PresetLiveTime {
                get {
                    try {
                        return ((float)(this[this.tableDetectorsRequestsSelect.PresetLiveTimeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PresetLiveTime\' in table \'DetectorsRequestsSelect\' is DBNul" +
                                "l.", e);
                    }
                }
                set {
                    this[this.tableDetectorsRequestsSelect.PresetLiveTimeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string RequestCode {
                get {
                    try {
                        return ((string)(this[this.tableDetectorsRequestsSelect.RequestCodeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RequestCode\' in table \'DetectorsRequestsSelect\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDetectorsRequestsSelect.RequestCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AcquisitionPath {
                get {
                    try {
                        return ((string)(this[this.tableDetectorsRequestsSelect.AcquisitionPathColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AcquisitionPath\' in table \'DetectorsRequestsSelect\' is DBNu" +
                                "ll.", e);
                    }
                }
                set {
                    this[this.tableDetectorsRequestsSelect.AcquisitionPathColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AcquisitionFileName {
                get {
                    try {
                        return ((string)(this[this.tableDetectorsRequestsSelect.AcquisitionFileNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AcquisitionFileName\' in table \'DetectorsRequestsSelect\' is " +
                                "DBNull.", e);
                    }
                }
                set {
                    this[this.tableDetectorsRequestsSelect.AcquisitionFileNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AcquisitionPathBackup {
                get {
                    try {
                        return ((string)(this[this.tableDetectorsRequestsSelect.AcquisitionPathBackupColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AcquisitionPathBackup\' in table \'DetectorsRequestsSelect\' i" +
                                "s DBNull.", e);
                    }
                }
                set {
                    this[this.tableDetectorsRequestsSelect.AcquisitionPathBackupColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AcquisitionFileNameBackup {
                get {
                    try {
                        return ((string)(this[this.tableDetectorsRequestsSelect.AcquisitionFileNameBackupColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AcquisitionFileNameBackup\' in table \'DetectorsRequestsSelec" +
                                "t\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDetectorsRequestsSelect.AcquisitionFileNameBackupColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int SampleID {
                get {
                    try {
                        return ((int)(this[this.tableDetectorsRequestsSelect.SampleIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SampleID\' in table \'DetectorsRequestsSelect\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDetectorsRequestsSelect.SampleIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SampleName {
                get {
                    try {
                        return ((string)(this[this.tableDetectorsRequestsSelect.SampleNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SampleName\' in table \'DetectorsRequestsSelect\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDetectorsRequestsSelect.SampleNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Comments {
                get {
                    try {
                        return ((string)(this[this.tableDetectorsRequestsSelect.CommentsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Comments\' in table \'DetectorsRequestsSelect\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDetectorsRequestsSelect.CommentsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Position {
                get {
                    try {
                        return ((int)(this[this.tableDetectorsRequestsSelect.PositionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Position\' in table \'DetectorsRequestsSelect\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDetectorsRequestsSelect.PositionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string IrradiationCode {
                get {
                    try {
                        return ((string)(this[this.tableDetectorsRequestsSelect.IrradiationCodeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IrradiationCode\' in table \'DetectorsRequestsSelect\' is DBNu" +
                                "ll.", e);
                    }
                }
                set {
                    this[this.tableDetectorsRequestsSelect.IrradiationCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int NumberOfAcq {
                get {
                    try {
                        return ((int)(this[this.tableDetectorsRequestsSelect.NumberOfAcqColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'NumberOfAcq\' in table \'DetectorsRequestsSelect\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDetectorsRequestsSelect.NumberOfAcqColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime RequestDateTime {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableDetectorsRequestsSelect.RequestDateTimeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RequestDateTime\' in table \'DetectorsRequestsSelect\' is DBNu" +
                                "ll.", e);
                    }
                }
                set {
                    this[this.tableDetectorsRequestsSelect.RequestDateTimeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDone {
                get {
                    try {
                        return ((bool)(this[this.tableDetectorsRequestsSelect.IsDoneColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsDone\' in table \'DetectorsRequestsSelect\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDetectorsRequestsSelect.IsDoneColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDetectorNameNull() {
                return this.IsNull(this.tableDetectorsRequestsSelect.DetectorNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDetectorNameNull() {
                this[this.tableDetectorsRequestsSelect.DetectorNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPresetRealTimeNull() {
                return this.IsNull(this.tableDetectorsRequestsSelect.PresetRealTimeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPresetRealTimeNull() {
                this[this.tableDetectorsRequestsSelect.PresetRealTimeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPresetLiveTimeNull() {
                return this.IsNull(this.tableDetectorsRequestsSelect.PresetLiveTimeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPresetLiveTimeNull() {
                this[this.tableDetectorsRequestsSelect.PresetLiveTimeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRequestCodeNull() {
                return this.IsNull(this.tableDetectorsRequestsSelect.RequestCodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRequestCodeNull() {
                this[this.tableDetectorsRequestsSelect.RequestCodeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAcquisitionPathNull() {
                return this.IsNull(this.tableDetectorsRequestsSelect.AcquisitionPathColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAcquisitionPathNull() {
                this[this.tableDetectorsRequestsSelect.AcquisitionPathColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAcquisitionFileNameNull() {
                return this.IsNull(this.tableDetectorsRequestsSelect.AcquisitionFileNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAcquisitionFileNameNull() {
                this[this.tableDetectorsRequestsSelect.AcquisitionFileNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAcquisitionPathBackupNull() {
                return this.IsNull(this.tableDetectorsRequestsSelect.AcquisitionPathBackupColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAcquisitionPathBackupNull() {
                this[this.tableDetectorsRequestsSelect.AcquisitionPathBackupColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAcquisitionFileNameBackupNull() {
                return this.IsNull(this.tableDetectorsRequestsSelect.AcquisitionFileNameBackupColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAcquisitionFileNameBackupNull() {
                this[this.tableDetectorsRequestsSelect.AcquisitionFileNameBackupColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSampleIDNull() {
                return this.IsNull(this.tableDetectorsRequestsSelect.SampleIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSampleIDNull() {
                this[this.tableDetectorsRequestsSelect.SampleIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSampleNameNull() {
                return this.IsNull(this.tableDetectorsRequestsSelect.SampleNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSampleNameNull() {
                this[this.tableDetectorsRequestsSelect.SampleNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCommentsNull() {
                return this.IsNull(this.tableDetectorsRequestsSelect.CommentsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCommentsNull() {
                this[this.tableDetectorsRequestsSelect.CommentsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPositionNull() {
                return this.IsNull(this.tableDetectorsRequestsSelect.PositionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPositionNull() {
                this[this.tableDetectorsRequestsSelect.PositionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIrradiationCodeNull() {
                return this.IsNull(this.tableDetectorsRequestsSelect.IrradiationCodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIrradiationCodeNull() {
                this[this.tableDetectorsRequestsSelect.IrradiationCodeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNumberOfAcqNull() {
                return this.IsNull(this.tableDetectorsRequestsSelect.NumberOfAcqColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNumberOfAcqNull() {
                this[this.tableDetectorsRequestsSelect.NumberOfAcqColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRequestDateTimeNull() {
                return this.IsNull(this.tableDetectorsRequestsSelect.RequestDateTimeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRequestDateTimeNull() {
                this[this.tableDetectorsRequestsSelect.RequestDateTimeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsDoneNull() {
                return this.IsNull(this.tableDetectorsRequestsSelect.IsDoneColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsDoneNull() {
                this[this.tableDetectorsRequestsSelect.IsDoneColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class DetectorsSelectRowChangeEvent : global::System.EventArgs {
            
            private DetectorsSelectRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DetectorsSelectRowChangeEvent(DetectorsSelectRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DetectorsSelectRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class DetectorsRequestsSelectRowChangeEvent : global::System.EventArgs {
            
            private DetectorsRequestsSelectRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DetectorsRequestsSelectRowChangeEvent(DetectorsRequestsSelectRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DetectorsRequestsSelectRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
namespace Sam.Labo_NAATableAdapters {
    
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class DetectorsSelectTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public DetectorsSelectTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "DetectorsSelect";
            tableMapping.ColumnMappings.Add("DetectorName", "DetectorName");
            tableMapping.ColumnMappings.Add("IsAvailable", "IsAvailable");
            tableMapping.ColumnMappings.Add("IsLocked", "IsLocked");
            tableMapping.ColumnMappings.Add("PresetRealTime", "PresetRealTime");
            tableMapping.ColumnMappings.Add("PresetLiveTime", "PresetLiveTime");
            tableMapping.ColumnMappings.Add("ElapsedRealTime", "ElapsedRealTime");
            tableMapping.ColumnMappings.Add("ElapsedLiveTime", "ElapsedLiveTime");
            tableMapping.ColumnMappings.Add("EneCalOffset", "EneCalOffset");
            tableMapping.ColumnMappings.Add("EneCalSlope", "EneCalSlope");
            tableMapping.ColumnMappings.Add("Spectrum", "Spectrum");
            tableMapping.ColumnMappings.Add("DeadTimePercent", "DeadTimePercent");
            tableMapping.ColumnMappings.Add("Position", "Position");
            tableMapping.ColumnMappings.Add("DetectorStatus", "DetectorStatus");
            tableMapping.ColumnMappings.Add("MCAStatus", "MCAStatus");
            tableMapping.ColumnMappings.Add("MCAStatusDescription", "MCAStatusDescription");
            tableMapping.ColumnMappings.Add("SampleID", "SampleID");
            tableMapping.ColumnMappings.Add("SampleName", "SampleName");
            tableMapping.ColumnMappings.Add("AcquisitionPath", "AcquisitionPath");
            tableMapping.ColumnMappings.Add("AcquisitionFileName", "AcquisitionFileName");
            tableMapping.ColumnMappings.Add("AcquisitionPathBackup", "AcquisitionPathBackup");
            tableMapping.ColumnMappings.Add("AcquisitionFileNameBackup", "AcquisitionFileNameBackup");
            tableMapping.ColumnMappings.Add("AcquisitionStartTime", "AcquisitionStartTime");
            tableMapping.ColumnMappings.Add("AcquisitionStartTimePC", "AcquisitionStartTimePC");
            tableMapping.ColumnMappings.Add("Comments", "Comments");
            tableMapping.ColumnMappings.Add("IrradiationCode", "IrradiationCode");
            tableMapping.ColumnMappings.Add("NumberOfAcq", "NumberOfAcq");
            tableMapping.ColumnMappings.Add("AcquisitionsIDReference", "AcquisitionsIDReference");
            tableMapping.ColumnMappings.Add("IsSaved", "IsSaved");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::Sam.Properties.Settings.Default.Labo_NAAConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "dbo.DetectorsSelect";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.StoredProcedure;
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RETURN_VALUE", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.ReturnValue, 10, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@DetectorName", global::System.Data.SqlDbType.NVarChar, 50, global::System.Data.ParameterDirection.Input, 0, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(Labo_NAA.DetectorsSelectDataTable dataTable, string DetectorName) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((DetectorName == null)) {
                this.Adapter.SelectCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = ((string)(DetectorName));
            }
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual Labo_NAA.DetectorsSelectDataTable GetData(string DetectorName) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((DetectorName == null)) {
                this.Adapter.SelectCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = ((string)(DetectorName));
            }
            Labo_NAA.DetectorsSelectDataTable dataTable = new Labo_NAA.DetectorsSelectDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class DetectorsRequestsSelectTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public DetectorsRequestsSelectTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "DetectorsRequestsSelect";
            tableMapping.ColumnMappings.Add("DetectorsRequestID", "DetectorsRequestID");
            tableMapping.ColumnMappings.Add("DetectorName", "DetectorName");
            tableMapping.ColumnMappings.Add("PresetRealTime", "PresetRealTime");
            tableMapping.ColumnMappings.Add("PresetLiveTime", "PresetLiveTime");
            tableMapping.ColumnMappings.Add("RequestCode", "RequestCode");
            tableMapping.ColumnMappings.Add("AcquisitionPath", "AcquisitionPath");
            tableMapping.ColumnMappings.Add("AcquisitionFileName", "AcquisitionFileName");
            tableMapping.ColumnMappings.Add("AcquisitionPathBackup", "AcquisitionPathBackup");
            tableMapping.ColumnMappings.Add("AcquisitionFileNameBackup", "AcquisitionFileNameBackup");
            tableMapping.ColumnMappings.Add("SampleID", "SampleID");
            tableMapping.ColumnMappings.Add("SampleName", "SampleName");
            tableMapping.ColumnMappings.Add("Comments", "Comments");
            tableMapping.ColumnMappings.Add("Position", "Position");
            tableMapping.ColumnMappings.Add("IrradiationCode", "IrradiationCode");
            tableMapping.ColumnMappings.Add("NumberOfAcq", "NumberOfAcq");
            tableMapping.ColumnMappings.Add("RequestDateTime", "RequestDateTime");
            tableMapping.ColumnMappings.Add("IsDone", "IsDone");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::Sam.Properties.Settings.Default.Labo_NAAConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "dbo.DetectorsRequestsSelect";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.StoredProcedure;
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RETURN_VALUE", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.ReturnValue, 10, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(Labo_NAA.DetectorsRequestsSelectDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual Labo_NAA.DetectorsRequestsSelectDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            Labo_NAA.DetectorsRequestsSelectDataTable dataTable = new Labo_NAA.DetectorsRequestsSelectDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class QueriesTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.IDbCommand[] _commandCollection;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.IDbCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.IDbCommand[3];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[0])).Connection = new global::System.Data.SqlClient.SqlConnection(global::Sam.Properties.Settings.Default.Labo_NAAConnectionString);
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[0])).CommandText = "dbo.DetectorsRequestsUpdate";
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[0])).CommandType = global::System.Data.CommandType.StoredProcedure;
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[0])).Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RETURN_VALUE", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.ReturnValue, 10, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[0])).Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RequestID", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 10, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1] = new global::System.Data.SqlClient.SqlCommand();
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[1])).Connection = new global::System.Data.SqlClient.SqlConnection(global::Sam.Properties.Settings.Default.Labo_NAAConnectionString);
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[1])).CommandText = "dbo.MCAUpdate";
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[1])).CommandType = global::System.Data.CommandType.StoredProcedure;
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[1])).Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RETURN_VALUE", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.ReturnValue, 10, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[1])).Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@DetectorName", global::System.Data.SqlDbType.NVarChar, 50, global::System.Data.ParameterDirection.Input, 0, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[1])).Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ElapsedRealTime", global::System.Data.SqlDbType.Real, 4, global::System.Data.ParameterDirection.Input, 24, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[1])).Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ElapsedLiveTime", global::System.Data.SqlDbType.Real, 4, global::System.Data.ParameterDirection.Input, 24, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[1])).Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@EneCalOffset", global::System.Data.SqlDbType.Real, 4, global::System.Data.ParameterDirection.Input, 24, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[1])).Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@EneCalSlope", global::System.Data.SqlDbType.Real, 4, global::System.Data.ParameterDirection.Input, 24, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[1])).Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Spectrum", global::System.Data.SqlDbType.VarBinary, 2147483647, global::System.Data.ParameterDirection.Input, 0, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[1])).Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@DeadTimePercent", global::System.Data.SqlDbType.Real, 4, global::System.Data.ParameterDirection.Input, 24, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[1])).Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@MCAStatus", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 10, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[1])).Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@MCAStatusDescription", global::System.Data.SqlDbType.NVarChar, 50, global::System.Data.ParameterDirection.Input, 0, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[1])).Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@AcquisitionStartTime", global::System.Data.SqlDbType.DateTime, 8, global::System.Data.ParameterDirection.Input, 23, 3, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[1])).Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@AcquisitionStartTimePC", global::System.Data.SqlDbType.DateTime, 8, global::System.Data.ParameterDirection.Input, 23, 3, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[2] = new global::System.Data.SqlClient.SqlCommand();
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[2])).Connection = new global::System.Data.SqlClient.SqlConnection(global::Sam.Properties.Settings.Default.Labo_NAAConnectionString);
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[2])).CommandText = "dbo.DetectorsUpdate";
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[2])).CommandType = global::System.Data.CommandType.StoredProcedure;
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[2])).Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RETURN_VALUE", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.ReturnValue, 10, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[2])).Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@DetectorName", global::System.Data.SqlDbType.NVarChar, 50, global::System.Data.ParameterDirection.Input, 0, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[2])).Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsAvailable", global::System.Data.SqlDbType.Bit, 1, global::System.Data.ParameterDirection.Input, 1, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[2])).Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsLocked", global::System.Data.SqlDbType.Bit, 1, global::System.Data.ParameterDirection.Input, 1, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[2])).Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsSaved", global::System.Data.SqlDbType.Bit, 1, global::System.Data.ParameterDirection.Input, 1, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[2])).Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@PresetRealTime", global::System.Data.SqlDbType.Real, 4, global::System.Data.ParameterDirection.Input, 24, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[2])).Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@PresetLiveTime", global::System.Data.SqlDbType.Real, 4, global::System.Data.ParameterDirection.Input, 24, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[2])).Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ElapsedRealTime", global::System.Data.SqlDbType.Real, 4, global::System.Data.ParameterDirection.Input, 24, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[2])).Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ElapsedLiveTime", global::System.Data.SqlDbType.Real, 4, global::System.Data.ParameterDirection.Input, 24, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[2])).Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@EneCalOffset", global::System.Data.SqlDbType.Real, 4, global::System.Data.ParameterDirection.Input, 24, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[2])).Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@EneCalSlope", global::System.Data.SqlDbType.Real, 4, global::System.Data.ParameterDirection.Input, 24, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[2])).Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Spectrum", global::System.Data.SqlDbType.VarBinary, 2147483647, global::System.Data.ParameterDirection.Input, 0, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[2])).Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@DeadTimePercent", global::System.Data.SqlDbType.Real, 4, global::System.Data.ParameterDirection.Input, 24, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[2])).Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Position", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 10, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[2])).Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@DetectorStatus", global::System.Data.SqlDbType.NVarChar, 50, global::System.Data.ParameterDirection.Input, 0, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[2])).Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@MCAStatus", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 10, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[2])).Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@MCAStatusDescription", global::System.Data.SqlDbType.NVarChar, 50, global::System.Data.ParameterDirection.Input, 0, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[2])).Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@SampleID", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 10, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[2])).Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@SampleName", global::System.Data.SqlDbType.NVarChar, 50, global::System.Data.ParameterDirection.Input, 0, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[2])).Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@AcquisitionPath", global::System.Data.SqlDbType.NVarChar, 255, global::System.Data.ParameterDirection.Input, 0, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[2])).Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@AcquisitionFileName", global::System.Data.SqlDbType.NVarChar, 50, global::System.Data.ParameterDirection.Input, 0, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[2])).Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@AcquisitionPathBackup", global::System.Data.SqlDbType.NVarChar, 255, global::System.Data.ParameterDirection.Input, 0, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[2])).Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@AcquisitionFileNameBackup", global::System.Data.SqlDbType.NVarChar, 50, global::System.Data.ParameterDirection.Input, 0, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[2])).Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@AcquisitionStartTime", global::System.Data.SqlDbType.DateTime, 8, global::System.Data.ParameterDirection.Input, 23, 3, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[2])).Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@AcquisitionStartTimePC", global::System.Data.SqlDbType.DateTime, 8, global::System.Data.ParameterDirection.Input, 23, 3, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[2])).Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Comments", global::System.Data.SqlDbType.NVarChar, 255, global::System.Data.ParameterDirection.Input, 0, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[2])).Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IrradiationCode", global::System.Data.SqlDbType.NVarChar, 50, global::System.Data.ParameterDirection.Input, 0, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[2])).Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@NumberOfAcq", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 10, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int DetectorsRequestsUpdate(global::System.Nullable<int> RequestID) {
            global::System.Data.SqlClient.SqlCommand command = ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[0]));
            if ((RequestID.HasValue == true)) {
                command.Parameters[1].Value = ((int)(RequestID.Value));
            }
            else {
                command.Parameters[1].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            int returnValue;
            try {
                returnValue = command.ExecuteNonQuery();
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int MCAUpdate(string DetectorName, global::System.Nullable<float> ElapsedRealTime, global::System.Nullable<float> ElapsedLiveTime, global::System.Nullable<float> EneCalOffset, global::System.Nullable<float> EneCalSlope, byte[] Spectrum, global::System.Nullable<float> DeadTimePercent, global::System.Nullable<int> MCAStatus, string MCAStatusDescription, global::System.Nullable<global::System.DateTime> AcquisitionStartTime, global::System.Nullable<global::System.DateTime> AcquisitionStartTimePC) {
            global::System.Data.SqlClient.SqlCommand command = ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[1]));
            if ((DetectorName == null)) {
                command.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                command.Parameters[1].Value = ((string)(DetectorName));
            }
            if ((ElapsedRealTime.HasValue == true)) {
                command.Parameters[2].Value = ((float)(ElapsedRealTime.Value));
            }
            else {
                command.Parameters[2].Value = global::System.DBNull.Value;
            }
            if ((ElapsedLiveTime.HasValue == true)) {
                command.Parameters[3].Value = ((float)(ElapsedLiveTime.Value));
            }
            else {
                command.Parameters[3].Value = global::System.DBNull.Value;
            }
            if ((EneCalOffset.HasValue == true)) {
                command.Parameters[4].Value = ((float)(EneCalOffset.Value));
            }
            else {
                command.Parameters[4].Value = global::System.DBNull.Value;
            }
            if ((EneCalSlope.HasValue == true)) {
                command.Parameters[5].Value = ((float)(EneCalSlope.Value));
            }
            else {
                command.Parameters[5].Value = global::System.DBNull.Value;
            }
            if ((Spectrum == null)) {
                command.Parameters[6].Value = global::System.DBNull.Value;
            }
            else {
                command.Parameters[6].Value = ((byte[])(Spectrum));
            }
            if ((DeadTimePercent.HasValue == true)) {
                command.Parameters[7].Value = ((float)(DeadTimePercent.Value));
            }
            else {
                command.Parameters[7].Value = global::System.DBNull.Value;
            }
            if ((MCAStatus.HasValue == true)) {
                command.Parameters[8].Value = ((int)(MCAStatus.Value));
            }
            else {
                command.Parameters[8].Value = global::System.DBNull.Value;
            }
            if ((MCAStatusDescription == null)) {
                command.Parameters[9].Value = global::System.DBNull.Value;
            }
            else {
                command.Parameters[9].Value = ((string)(MCAStatusDescription));
            }
            if ((AcquisitionStartTime.HasValue == true)) {
                command.Parameters[10].Value = ((System.DateTime)(AcquisitionStartTime.Value));
            }
            else {
                command.Parameters[10].Value = global::System.DBNull.Value;
            }
            if ((AcquisitionStartTimePC.HasValue == true)) {
                command.Parameters[11].Value = ((System.DateTime)(AcquisitionStartTimePC.Value));
            }
            else {
                command.Parameters[11].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            int returnValue;
            try {
                returnValue = command.ExecuteNonQuery();
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int DetectorsUpdate(
                    string DetectorName, 
                    global::System.Nullable<bool> IsAvailable, 
                    global::System.Nullable<bool> IsLocked, 
                    global::System.Nullable<bool> IsSaved, 
                    global::System.Nullable<float> PresetRealTime, 
                    global::System.Nullable<float> PresetLiveTime, 
                    global::System.Nullable<float> ElapsedRealTime, 
                    global::System.Nullable<float> ElapsedLiveTime, 
                    global::System.Nullable<float> EneCalOffset, 
                    global::System.Nullable<float> EneCalSlope, 
                    byte[] Spectrum, 
                    global::System.Nullable<float> DeadTimePercent, 
                    global::System.Nullable<int> Position, 
                    string DetectorStatus, 
                    global::System.Nullable<int> MCAStatus, 
                    string MCAStatusDescription, 
                    global::System.Nullable<int> SampleID, 
                    string SampleName, 
                    string AcquisitionPath, 
                    string AcquisitionFileName, 
                    string AcquisitionPathBackup, 
                    string AcquisitionFileNameBackup, 
                    global::System.Nullable<global::System.DateTime> AcquisitionStartTime, 
                    global::System.Nullable<global::System.DateTime> AcquisitionStartTimePC, 
                    string Comments, 
                    string IrradiationCode, 
                    global::System.Nullable<int> NumberOfAcq) {
            global::System.Data.SqlClient.SqlCommand command = ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[2]));
            if ((DetectorName == null)) {
                command.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                command.Parameters[1].Value = ((string)(DetectorName));
            }
            if ((IsAvailable.HasValue == true)) {
                command.Parameters[2].Value = ((bool)(IsAvailable.Value));
            }
            else {
                command.Parameters[2].Value = global::System.DBNull.Value;
            }
            if ((IsLocked.HasValue == true)) {
                command.Parameters[3].Value = ((bool)(IsLocked.Value));
            }
            else {
                command.Parameters[3].Value = global::System.DBNull.Value;
            }
            if ((IsSaved.HasValue == true)) {
                command.Parameters[4].Value = ((bool)(IsSaved.Value));
            }
            else {
                command.Parameters[4].Value = global::System.DBNull.Value;
            }
            if ((PresetRealTime.HasValue == true)) {
                command.Parameters[5].Value = ((float)(PresetRealTime.Value));
            }
            else {
                command.Parameters[5].Value = global::System.DBNull.Value;
            }
            if ((PresetLiveTime.HasValue == true)) {
                command.Parameters[6].Value = ((float)(PresetLiveTime.Value));
            }
            else {
                command.Parameters[6].Value = global::System.DBNull.Value;
            }
            if ((ElapsedRealTime.HasValue == true)) {
                command.Parameters[7].Value = ((float)(ElapsedRealTime.Value));
            }
            else {
                command.Parameters[7].Value = global::System.DBNull.Value;
            }
            if ((ElapsedLiveTime.HasValue == true)) {
                command.Parameters[8].Value = ((float)(ElapsedLiveTime.Value));
            }
            else {
                command.Parameters[8].Value = global::System.DBNull.Value;
            }
            if ((EneCalOffset.HasValue == true)) {
                command.Parameters[9].Value = ((float)(EneCalOffset.Value));
            }
            else {
                command.Parameters[9].Value = global::System.DBNull.Value;
            }
            if ((EneCalSlope.HasValue == true)) {
                command.Parameters[10].Value = ((float)(EneCalSlope.Value));
            }
            else {
                command.Parameters[10].Value = global::System.DBNull.Value;
            }
            if ((Spectrum == null)) {
                command.Parameters[11].Value = global::System.DBNull.Value;
            }
            else {
                command.Parameters[11].Value = ((byte[])(Spectrum));
            }
            if ((DeadTimePercent.HasValue == true)) {
                command.Parameters[12].Value = ((float)(DeadTimePercent.Value));
            }
            else {
                command.Parameters[12].Value = global::System.DBNull.Value;
            }
            if ((Position.HasValue == true)) {
                command.Parameters[13].Value = ((int)(Position.Value));
            }
            else {
                command.Parameters[13].Value = global::System.DBNull.Value;
            }
            if ((DetectorStatus == null)) {
                command.Parameters[14].Value = global::System.DBNull.Value;
            }
            else {
                command.Parameters[14].Value = ((string)(DetectorStatus));
            }
            if ((MCAStatus.HasValue == true)) {
                command.Parameters[15].Value = ((int)(MCAStatus.Value));
            }
            else {
                command.Parameters[15].Value = global::System.DBNull.Value;
            }
            if ((MCAStatusDescription == null)) {
                command.Parameters[16].Value = global::System.DBNull.Value;
            }
            else {
                command.Parameters[16].Value = ((string)(MCAStatusDescription));
            }
            if ((SampleID.HasValue == true)) {
                command.Parameters[17].Value = ((int)(SampleID.Value));
            }
            else {
                command.Parameters[17].Value = global::System.DBNull.Value;
            }
            if ((SampleName == null)) {
                command.Parameters[18].Value = global::System.DBNull.Value;
            }
            else {
                command.Parameters[18].Value = ((string)(SampleName));
            }
            if ((AcquisitionPath == null)) {
                command.Parameters[19].Value = global::System.DBNull.Value;
            }
            else {
                command.Parameters[19].Value = ((string)(AcquisitionPath));
            }
            if ((AcquisitionFileName == null)) {
                command.Parameters[20].Value = global::System.DBNull.Value;
            }
            else {
                command.Parameters[20].Value = ((string)(AcquisitionFileName));
            }
            if ((AcquisitionPathBackup == null)) {
                command.Parameters[21].Value = global::System.DBNull.Value;
            }
            else {
                command.Parameters[21].Value = ((string)(AcquisitionPathBackup));
            }
            if ((AcquisitionFileNameBackup == null)) {
                command.Parameters[22].Value = global::System.DBNull.Value;
            }
            else {
                command.Parameters[22].Value = ((string)(AcquisitionFileNameBackup));
            }
            if ((AcquisitionStartTime.HasValue == true)) {
                command.Parameters[23].Value = ((System.DateTime)(AcquisitionStartTime.Value));
            }
            else {
                command.Parameters[23].Value = global::System.DBNull.Value;
            }
            if ((AcquisitionStartTimePC.HasValue == true)) {
                command.Parameters[24].Value = ((System.DateTime)(AcquisitionStartTimePC.Value));
            }
            else {
                command.Parameters[24].Value = global::System.DBNull.Value;
            }
            if ((Comments == null)) {
                command.Parameters[25].Value = global::System.DBNull.Value;
            }
            else {
                command.Parameters[25].Value = ((string)(Comments));
            }
            if ((IrradiationCode == null)) {
                command.Parameters[26].Value = global::System.DBNull.Value;
            }
            else {
                command.Parameters[26].Value = ((string)(IrradiationCode));
            }
            if ((NumberOfAcq.HasValue == true)) {
                command.Parameters[27].Value = ((int)(NumberOfAcq.Value));
            }
            else {
                command.Parameters[27].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            int returnValue;
            try {
                returnValue = command.ExecuteNonQuery();
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            return returnValue;
        }
    }
    
    /// <summary>
    ///TableAdapterManager is used to coordinate TableAdapters in the dataset to enable Hierarchical Update scenarios
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerDesigner, Microsoft.VSD" +
        "esigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapterManager")]
    public partial class TableAdapterManager : global::System.ComponentModel.Component {
        
        private UpdateOrderOption _updateOrder;
        
        private bool _backupDataSetBeforeUpdate;
        
        private global::System.Data.IDbConnection _connection;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public UpdateOrderOption UpdateOrder {
            get {
                return this._updateOrder;
            }
            set {
                this._updateOrder = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool BackupDataSetBeforeUpdate {
            get {
                return this._backupDataSetBeforeUpdate;
            }
            set {
                this._backupDataSetBeforeUpdate = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        public global::System.Data.IDbConnection Connection {
            get {
                if ((this._connection != null)) {
                    return this._connection;
                }
                return null;
            }
            set {
                this._connection = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        public int TableAdapterInstanceCount {
            get {
                int count = 0;
                return count;
            }
        }
        
        /// <summary>
        ///Update rows in top-down order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private int UpdateUpdatedRows(Labo_NAA dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            int result = 0;
            return result;
        }
        
        /// <summary>
        ///Insert rows in top-down order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private int UpdateInsertedRows(Labo_NAA dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            int result = 0;
            return result;
        }
        
        /// <summary>
        ///Delete rows in bottom-up order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private int UpdateDeletedRows(Labo_NAA dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows) {
            int result = 0;
            return result;
        }
        
        /// <summary>
        ///Remove inserted rows that become updated rows after calling TableAdapter.Update(inserted rows) first
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Data.DataRow[] GetRealUpdatedRows(global::System.Data.DataRow[] updatedRows, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            if (((updatedRows == null) 
                        || (updatedRows.Length < 1))) {
                return updatedRows;
            }
            if (((allAddedRows == null) 
                        || (allAddedRows.Count < 1))) {
                return updatedRows;
            }
            global::System.Collections.Generic.List<global::System.Data.DataRow> realUpdatedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            for (int i = 0; (i < updatedRows.Length); i = (i + 1)) {
                global::System.Data.DataRow row = updatedRows[i];
                if ((allAddedRows.Contains(row) == false)) {
                    realUpdatedRows.Add(row);
                }
            }
            return realUpdatedRows.ToArray();
        }
        
        /// <summary>
        ///Update all changes to the dataset.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public virtual int UpdateAll(Labo_NAA dataSet) {
            if ((dataSet == null)) {
                throw new global::System.ArgumentNullException("dataSet");
            }
            if ((dataSet.HasChanges() == false)) {
                return 0;
            }
            global::System.Data.IDbConnection workConnection = this.Connection;
            if ((workConnection == null)) {
                throw new global::System.ApplicationException("TableAdapterManager contains no connection information. Set each TableAdapterMana" +
                        "ger TableAdapter property to a valid TableAdapter instance.");
            }
            bool workConnOpened = false;
            if (((workConnection.State & global::System.Data.ConnectionState.Broken) 
                        == global::System.Data.ConnectionState.Broken)) {
                workConnection.Close();
            }
            if ((workConnection.State == global::System.Data.ConnectionState.Closed)) {
                workConnection.Open();
                workConnOpened = true;
            }
            global::System.Data.IDbTransaction workTransaction = workConnection.BeginTransaction();
            if ((workTransaction == null)) {
                throw new global::System.ApplicationException("The transaction cannot begin. The current data connection does not support transa" +
                        "ctions or the current state is not allowing the transaction to begin.");
            }
            global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            global::System.Collections.Generic.List<global::System.Data.Common.DataAdapter> adaptersWithAcceptChangesDuringUpdate = new global::System.Collections.Generic.List<global::System.Data.Common.DataAdapter>();
            global::System.Collections.Generic.Dictionary<object, global::System.Data.IDbConnection> revertConnections = new global::System.Collections.Generic.Dictionary<object, global::System.Data.IDbConnection>();
            int result = 0;
            global::System.Data.DataSet backupDataSet = null;
            if (this.BackupDataSetBeforeUpdate) {
                backupDataSet = new global::System.Data.DataSet();
                backupDataSet.Merge(dataSet);
            }
            try {
                // ---- Prepare for update -----------
                //
                // 
                //---- Perform updates -----------
                //
                if ((this.UpdateOrder == UpdateOrderOption.UpdateInsertDelete)) {
                    result = (result + this.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows));
                    result = (result + this.UpdateInsertedRows(dataSet, allAddedRows));
                }
                else {
                    result = (result + this.UpdateInsertedRows(dataSet, allAddedRows));
                    result = (result + this.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows));
                }
                result = (result + this.UpdateDeletedRows(dataSet, allChangedRows));
                // 
                //---- Commit updates -----------
                //
                workTransaction.Commit();
                if ((0 < allAddedRows.Count)) {
                    global::System.Data.DataRow[] rows = new System.Data.DataRow[allAddedRows.Count];
                    allAddedRows.CopyTo(rows);
                    for (int i = 0; (i < rows.Length); i = (i + 1)) {
                        global::System.Data.DataRow row = rows[i];
                        row.AcceptChanges();
                    }
                }
                if ((0 < allChangedRows.Count)) {
                    global::System.Data.DataRow[] rows = new System.Data.DataRow[allChangedRows.Count];
                    allChangedRows.CopyTo(rows);
                    for (int i = 0; (i < rows.Length); i = (i + 1)) {
                        global::System.Data.DataRow row = rows[i];
                        row.AcceptChanges();
                    }
                }
            }
            catch (global::System.Exception ex) {
                workTransaction.Rollback();
                // ---- Restore the dataset -----------
                if (this.BackupDataSetBeforeUpdate) {
                    global::System.Diagnostics.Debug.Assert((backupDataSet != null));
                    dataSet.Clear();
                    dataSet.Merge(backupDataSet);
                }
                else {
                    if ((0 < allAddedRows.Count)) {
                        global::System.Data.DataRow[] rows = new System.Data.DataRow[allAddedRows.Count];
                        allAddedRows.CopyTo(rows);
                        for (int i = 0; (i < rows.Length); i = (i + 1)) {
                            global::System.Data.DataRow row = rows[i];
                            row.AcceptChanges();
                            row.SetAdded();
                        }
                    }
                }
                throw ex;
            }
            finally {
                if (workConnOpened) {
                    workConnection.Close();
                }
                if ((0 < adaptersWithAcceptChangesDuringUpdate.Count)) {
                    global::System.Data.Common.DataAdapter[] adapters = new System.Data.Common.DataAdapter[adaptersWithAcceptChangesDuringUpdate.Count];
                    adaptersWithAcceptChangesDuringUpdate.CopyTo(adapters);
                    for (int i = 0; (i < adapters.Length); i = (i + 1)) {
                        global::System.Data.Common.DataAdapter adapter = adapters[i];
                        adapter.AcceptChangesDuringUpdate = true;
                    }
                }
            }
            return result;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected virtual void SortSelfReferenceRows(global::System.Data.DataRow[] rows, global::System.Data.DataRelation relation, bool childFirst) {
            global::System.Array.Sort<global::System.Data.DataRow>(rows, new SelfReferenceComparer(relation, childFirst));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected virtual bool MatchTableAdapterConnection(global::System.Data.IDbConnection inputConnection) {
            if ((this._connection != null)) {
                return true;
            }
            if (((this.Connection == null) 
                        || (inputConnection == null))) {
                return true;
            }
            if (string.Equals(this.Connection.ConnectionString, inputConnection.ConnectionString, global::System.StringComparison.Ordinal)) {
                return true;
            }
            return false;
        }
        
        /// <summary>
        ///Update Order Option
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public enum UpdateOrderOption {
            
            InsertUpdateDelete = 0,
            
            UpdateInsertDelete = 1,
        }
        
        /// <summary>
        ///Used to sort self-referenced table's rows
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        private class SelfReferenceComparer : object, global::System.Collections.Generic.IComparer<global::System.Data.DataRow> {
            
            private global::System.Data.DataRelation _relation;
            
            private int _childFirst;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SelfReferenceComparer(global::System.Data.DataRelation relation, bool childFirst) {
                this._relation = relation;
                if (childFirst) {
                    this._childFirst = -1;
                }
                else {
                    this._childFirst = 1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool IsChildAndParent(global::System.Data.DataRow child, global::System.Data.DataRow parent) {
                global::System.Diagnostics.Debug.Assert((child != null));
                global::System.Diagnostics.Debug.Assert((parent != null));
                global::System.Data.DataRow newParent = child.GetParentRow(this._relation, global::System.Data.DataRowVersion.Default);
                for (
                ; ((newParent != null) 
                            && ((object.ReferenceEquals(newParent, child) == false) 
                            && (object.ReferenceEquals(newParent, parent) == false))); 
                ) {
                    newParent = newParent.GetParentRow(this._relation, global::System.Data.DataRowVersion.Default);
                }
                if ((newParent == null)) {
                    for (newParent = child.GetParentRow(this._relation, global::System.Data.DataRowVersion.Original); ((newParent != null) 
                                && ((object.ReferenceEquals(newParent, child) == false) 
                                && (object.ReferenceEquals(newParent, parent) == false))); 
                    ) {
                        newParent = newParent.GetParentRow(this._relation, global::System.Data.DataRowVersion.Original);
                    }
                }
                if (object.ReferenceEquals(newParent, parent)) {
                    return true;
                }
                return false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Compare(global::System.Data.DataRow row1, global::System.Data.DataRow row2) {
                if (object.ReferenceEquals(row1, row2)) {
                    return 0;
                }
                if ((row1 == null)) {
                    return -1;
                }
                if ((row2 == null)) {
                    return 1;
                }

                // Is row1 the child or grandchild of row2
                if (this.IsChildAndParent(row1, row2)) {
                    return this._childFirst;
                }

                // Is row2 the child or grandchild of row1
                if (this.IsChildAndParent(row2, row1)) {
                    return (-1 * this._childFirst);
                }
                return 0;
            }
        }
    }
}

#pragma warning restore 1591